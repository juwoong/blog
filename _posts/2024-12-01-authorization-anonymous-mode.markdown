---
layout: post
title: "지식 전달의 두가지 모드 - Auth와 Anonymous"
date: 2024-12-01 23:12:00+0900
tags: [idea]
---

무언가를 가르치는 상황에 놓여본 적 있는가? 커리어가 쌓이고 나면 누군가에게 본인이 가진 지식을 전달해야 하는 상황이 생기곤 한다. 다양한 경험을 통해 쌓여진 나만의 교육 철학이 있었지만, 어느 순간에는 매우 잘 작동하고 어느 순간에는 잘 작동하지 않음을 넘어 상대방의 불쾌한 반응까지도 감내해야 하는 순간도 있었다.

대부분의 교수자(선생님)들은 여기서 문제되는 학생과의 대화를 통해 풀어나가려고 노력하지만, 가끔 성공하는 경우를 제외하고는 그리 유의미한 성과를 얻어가지 못한다. 그리고 나서는 "학생들이 적극적이지 않아서 어렵네요" 라는 말로 합리화하며 포기하곤 한다. 돌이켜보면 나조차도 이런 선택을 했던 것 같다.

반대로, 적극적으로 아는 지식에 대해서 알려주려고 해도 나쁜 반응이 돌아오는 경우도 생긴다. 물어봐서 알려줬더니 "날 너무 무시하는 것 같아서 기분이 나빴다" 와 같은 황당한 대답을 들은 적도 있다. 대체 뭐가 문제였고, 이런 문제는 어떻게 해결하는 것이 옳을까?

## 학생의 분류

학생들의 태도를 보아할 때, "능동적인가" 하나만을 가지고 판별하는 측면이 있다. 하지만 내가 느끼기에는 학습 결과를 좌우하는 하나의 큰 요소가 더 있다고 본다. 바로 열린 마인드이다. "능동성"과 "열린 마인드"를 이용해 보면 다음과 같이 학생들의 성향을 분류할 수 있다.

![학생 상태 분류]({{ "/assets/images/articles/student_diagram.webp" | relative_url }})

너무 당연해 보이는 두가지, 무반응자와 자기학습자를 제외하고 나머지 두 분류만 설명해보겠다. 수업시간에 툭툭 시비걸듯 내용에 딴지를 거는 사람들이 있었을 것이다. 굳이 입밖으로 내뱉지 않더라도 태도 자체가 시니컬한 사람들. 그 사람들이 공격자에 가깝다.

그렇다면 학생 신드롬이란? 전달된 지식을 능동적으로 이해하려 들지 않고, 교수자의 말이 곧 정답인 양 받아들이는 학생들이 있다. 교수자에 따라서 이런 학생들도 성공적인 학생일 수 있지만, 나는 이런 학생들이 가장 큰 문제라고 생각한다. 실제 상황의 문제를 해결할 수 없는 상태로 가기 때문이다.

하여 무언가를 알려줄 때 가장 궁극적인 목표는 학생들을 "자기학습자" 상태로 만드는 것이다. 스스로 궁금한 점이 생겨서 찾아보고, 발전할 수 있게끔.

## 지식 전달의 두가지 모드

우리가 이런 반응을 지닌 학생들에게 사용할 수 있는 접근방식은 무궁무진하지만, 가장 기본적으로 내가 어떤 모드인 상태로 학생들을 받아들여야 할지 정해야 한다. 나는 이 모드에는 두가지 모드가 있다고 생각한다. `Authorization` 모드와 `Anonymous` 모드이다.

### Anonymous 모드

브라우저에서 **시크릿 창**을 띄워본 적 있는가? 공용 컴퓨터 등에서 개인 계정에 로그인해야 하는 일이 생길 때 주로 사용하곤 하는데, 창을 닫으면 접속기록이 자연스럽게 삭제되는 모드이다. 내가 해당 모드를 이용한 사람들의 정보를 알 수 없다는 뜻이기도 하다.

![시크릿 모드]({{ "/assets/images/articles/incognito-mode.webp" | relative_url }})

첫번째 모드인 `Anonymous` 모드란, 내가 수업을 듣는 학생에 대해서 아무것도 모른다는 사실을 받아들이고, 그 점을 적극적으로 고려하여 대처하는 모드이다. 나는 이 수업을 듣는 학생들이 얼마나 많은 정보를 알고 있을지도, 얼마나 빠르게 개념을 소화할지도 모른다. 하여 "나는 아무것도 모르는 사람에게 정보를 알려주는 것이다" 라는 대전제를 깔고 전달하는 것이 바로 이 모드이다.

이때 중요한 것은 "내가 쓰는 말이나 표현 중 전문가를 위한 표현이 얼마나 있는지" 점검하는 것이다. 전문화된 지식에 대해서 생각해보면, 또 다른 전문지식을 레버리지하여 설명하는 경우는 꽤나 흔하게 볼 수 있다.

```python
class Person:
    def __init__(self, name: str):
        self.name = name

    def get_name():
        return self.name

class Student(Person):
    def __init__(self):
        super().__init__()
```

이 코드가 오류나는 이유를 설명해 보라고 한다면, 전문가들은 이렇게 답할 것이다.

> Student가 Person 클래스를 상속받고 있는데, Person 클래스의 생성자는 name을 매개 변수로 받고 있다. 하지만 Student에서 부모 클래스, 즉 Person 클래스의 생성자를 호출할 때 name 매개변수를 넣어주고 있지 않아서 오류가 난다.

맞는 말이고 그렇게 어려운 말도 아니다. 하지만 이 말에서도 이미 엄청나게 많은 전문 용어가 사용되었다. 전문용어를 하이라이트했을 때 다음과 같다.

> Student가 Person 클래스를 **상속**받고 있는데, Person 클래스의 **생성자**는 name을 **매개 변수**로 받고 있다. 하지만 Student에서 부모 클래스, 즉 Person 클래스의 **생성자**를 호출할 때 name **매개변수**를 넣어주고 있지 않아서 오류가 난다.

물론 배우는 상황적 맥락을 고려했을 때 저 단어들을 한번쯤은 들어봤을 것이다. 다만 그렇게 설명했을 때 바로 착착 이해할 수 있는 수준이 아직 되지 않았을 가능성이 높다. 수업시간에 배웠던 단어들을 죄다 머리속에 끌어올 수 있는가? 하면 아닐 것이기 떄문이다.

### Authorization 모드

`Anonymous` 모드와 반대되는 `Authorization` 모드이다. 개인의 상황을 충분히 파악하고, 개인에게 적합한 방식으로 접근하여 학습을 하도록 유도하는 방식이다. 이렇게 접근했을 때에는 개인에게 최적화된 방식으로 "학습"이라는 주어진 문제를 풀어내야 한다. 여기에는 개인의 학습 동기를 파악하고, 개인이 갖고 있는 병목 지점을 이해한 후, 이를 같이 해결해 나가는 과정이다.

다음과 같은 대화들을 살펴보자.

```
선생: 제가 해보라고 한 연습문제 다 해 보셨나요?

학생: 네. 다 해 봤어요.

선생: (확인) 오, 맞아요. 이렇게 하면 됩니다. 혹시 난이도는 어땠나요?

학생: 조금 쉬웠던 것 같아요.

선생: 그렇군요. 그럼 제가 하나 더 문제를 내 볼게요. 이 코드는 실 환경에서 그대로 사용하기에는 문제가 있어요. 어떤 문제가 있을 것 같아요?

학생: (곰곰히 생각해보다가) 아무래도 사용자가 이메일을 이상하게 입력할 때를 고려하지 못할 것 같아요.

선생: 맞아요. 그럼 그 문제를 해결하기 위해서 이 코드를 어떻게 고쳐야 할까요? 한번 고쳐보겠어요?
```

```
선생: 제가 해보라고 한 연습문제 다 해 보셨나요?

학생: 아뇨.

선생: 어, 무슨 어려움이 있나요?

학생: (..)

선생: 뭘 어디서부터 어떻게 해야할 지도 모르겠는 상황이군요.

학생: 네. 조금 감이 안 잡혀요.

선생: 어디까지 해 봤어요? 한번 저한테 보여주시겠어요?
```

이런 식의 접근방식이 Authorization 모드이다. 로그인해서 활동을 하면 결국 활동기록이 남듯이, 그 활동기록을 기반하여 학생과의 커뮤니케이션을 일일히 맞추어나가는 방식이 된다. 이 과정에서는 학생에게 현재 상태를 얻어내려는 언어적, 비언어적 탐색 활동이 매우 중요하다. 학생이 스스로에 대해서 말하지 않는 수동적 상태이더라도 맞추어 대응해야 하기 때문이다.

## 학생 스타일 별 대응 방법

### "자기 학습자"의 경우

선생님들이 "자기 학습자"를 좋아하는 이유는 명확하다. 스스로 계속 탐구하고, 그 결과를 보여주기 때문이다. 그 모습을 보여준다면 대부분의 선생님들이 매우 뿌듯하게 여기고 더 많은 것을 주고자 할 것이다.

다만 여기서 주의할 점은, 자기 학습자들은 본인만의 학습 방법이나 목표가 뚜렷한 학생들일 가능성이 높다. 그 점을 고려하여, 학생들의 의사를 그 자리에서 확실히 하여, 최대한 학생이 가려고 하는 방향을 보조해 주는 방식을 쓰는 것이 좋다고 생각한다. 굳이 따지자면 `Anonymous`한 접근 방식이다. 학생들은 스스로 많이 발전해 오기 떄문에, 발전 상황을 총체적으로 고려하여 다음 조어능 해주는 것이 좋다.

### "학생 신드롬"의 경우

개인적으로 학생 신드롬이 긍정적인 방향으로 옮기기 제일 쉬운 부류이다. 일단 배울 의지는 있기 때문이다. 다만 스스로 생각해보게끔 해야 하는데, 그냥 질문보다는 질문의 의도까지 같이 전달해 주는 것이 제일 효과가 좋았다. "이것 또한 너에게 도움이 되는 거니까, 조금 어렵고 어색하더라도 한번 시도해보렴" 이라는 마음이 전달된다면 그들은 기꺼이 고민하여 고민의 결과를 들고 올 것이다. 그것이 정녕 포기라고 할 지라도.

여러분들이 할 것이란 그들의 고민을 인지하고, 다음 상황에도 그 고민을 이어서 질문 해 주는 것이다. 계속 스스로 생각해 보게 하더라도, 그들이 여러분에게 느끼는 진심에 따라 "공격자"와 "자기 학습자"로 나뉠 것이다. "저 사람이 그냥 날 귀찮게 한다"와, "저렇게 나에게 관심을 가져주는 사람이 꼭 해봤으면 좋겠다고 말하는 것이라면, 나에게도 좋은 것이 분명하다" 는 분명히 다르다. 이는 `Authorization`에 가깝다.

### "무반응자"의 경우

사람들이 쉽게 하는 오해 중 하나는, "반응이 없으면 대화를 이어나가기 어렵다" 라는 것이다. 반대로 생각해보자. 대답이 없으면, 당신이 그냥 확정지어서 "아, 이런 거군요?" 라고 물어보자. 열에 아홉은 반응이 돌아올 것이다.

사람이 앞에서 묻는데 그냥 말하기 싫어서 거부하는 사람은 생각보다 흔하지 않다. 대부분 어떻게 말해야 할지 모르겠어서, 내가 어떤 생각인지 모르겠어서 우물쭈물하다가 대답을 못하는 경우가 훨씬 많다. 그런 사람들에게는 그냥 바로 물어보자. 당신이 생각하는 것이 이런 것이냐고. 한번에 맞추었다면 운이 좋고, 그렇지 못하다면 그 이후로 계속 질문하여 대답을 이끌어내면 된다. 그들이 느끼는 병목으로 그들이 직접 여러분을 데리고 갈 것이다.

이 과정에서 가장 중요한 것은, 끊임없이 "나는 저 학생에 대해 모른다"라고 되뇌이는 것이다. `Anonymous` 모드를 잘 활용해 보자. "난 잘 안다"라고 생각하는 순간 들어주기보다는 말하기를 선택할 확률이 높고, 그런 순간 학생은 다시금 "무반응자"로 돌아갈 확률이 높다.

### "공격자"의 경우

위에 말한 4가지 스타일 중에서, 공격자가 제일 대응하기 어렵다. 저 사람들은 능동적인 거부를 하고 있기 때문이다. 마술사 김준표씨가 유튜브에서 "공연때 제일 어려운 관객 스타일"로 공연 보러 오기 싫어하는 사람들을 들었다. 그 사람들은 공연에 집중하지 않고 비판적인 태도로 보고 있기 때문이라고. 수업 상황에서도 마찬가지다.

동기면담(Motivational Interviewing)기법에 의하면, 누군가를 변화시키기 위해서는 스스로에게 동기를 불어넣어주어야 한다고 했다. 역설적으로 그렇기 때문에 내가 그들을 직접적으로 움직이게 할 방법은 없다. 다만, 계속해서 친절하게 질문들을 던져보자. 여기서 가장 중요한 것은 "기계적으로" 보이면 안된다는 것이다. 웃는 얼굴에 침 뱉기는 어렵고, 그렇게 계속해서 이어나가다 보면 조금씩이라도 호의적으로 움직이는 그들을 발견할 수 있다. 그렇다. 적어도 "무반응자" 혹은 "학생 신드롬"으로 옮겨낸 것이다.

## 결론

내가 어떤 접근방식을 사용하느냐에 따라 매우 효과적으로 사람의 변화를 일으킬 수 있다는 점을 이해하자. 그럴 수록 더 많은 사람들에게 긍정적인 영향을 끼칠 수 있을 것이다. 샘 알트먼은 저 사람이 어떤 사람인지 평가하는 것을 두려워하지 말라고 하였다. 적극적으로 판별하고, 적극적으로 수정해 나가면서 그들에게 긍정적인 영향을 끼칠 수 있는 방법이 무엇인지 고민해 보자.
